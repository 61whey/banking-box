"""
Product Applications API - –ó–∞—è–≤–∫–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
OpenBanking Russia Products API v1.3.1
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from pydantic import BaseModel
from typing import Optional, List
from decimal import Decimal
from datetime import datetime
import uuid
import json

from database import get_db
from models import ProductApplication, Product, Client
from services.auth_service import get_current_client

router = APIRouter(
    prefix="/product-application", 
    tags=["10 OpenBanking: Product Applications"]
)


# === Pydantic Models ===

class ProductApplicationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏"""
    product_id: str
    requested_amount: float
    requested_term_months: Optional[int] = None
    application_data: Optional[dict] = None  # –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ (–¥–æ—Ö–æ–¥, —Å—Ç–∞–∂, –∏ —Ç.–¥.)


class ProductApplicationResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏"""
    application_id: str
    client_id: str
    product_id: str
    product_name: str
    requested_amount: float
    requested_term_months: Optional[int]
    status: str
    decision: Optional[str]
    decision_reason: Optional[str]
    approved_amount: Optional[float]
    approved_rate: Optional[float]
    submitted_at: str
    reviewed_at: Optional[str]
    decision_at: Optional[str]


# === Endpoints ===

@router.post("", status_code=201)
async def create_product_application(
    request: ProductApplicationRequest,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    ## üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç
    
    **OpenBanking Russia Products API v1.3.1 - —á–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –≤–æ—Ä–æ–Ω–∫–∏**
    
    ### –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞:
    1. ‚úÖ –ö–∞—Ç–∞–ª–æ–≥ ‚Üí `GET /products` (–≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç)
    2. ‚úÖ –õ–∏–¥ ‚Üí `POST /customer-leads` (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã)
    3. ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Üí `GET /product-offers` (–ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    4. **üëâ –ó–∞—è–≤–∫–∞ ‚Üí `POST /product-application` (–í–´ –ó–î–ï–°–¨)**
    5. ‚è≠Ô∏è –î–æ–≥–æ–≤–æ—Ä ‚Üí `POST /product-agreements` (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
    
    ### –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    - –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
    - –ù—É–∂–Ω–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    
    ### –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ```json
    {
      "product_id": "prod-vb-loan-002",
      "requested_amount": 500000.0,
      "requested_term_months": 36,
      "application_data": {
        "monthly_income": 80000,
        "employment_type": "permanent",
        "work_experience_months": 48,
        "has_collateral": false
      }
    }
    ```
    
    ### –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞—è–≤–∫–∏:
    
    **1. –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ (–∫–ª–∏–µ–Ω—Ç)**
    - –°—Ç–∞—Ç—É—Å: `pending`
    - –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–Ω–∫
    
    **2. –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (–±–∞–Ω–∫–∏—Ä —á–µ—Ä–µ–∑ Banker API)**
    - –°—Ç–∞—Ç—É—Å: `under_review`
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–∫–æ—Ä–∏–Ω–≥
    
    **3. –†–µ—à–µ–Ω–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–ª–∏ –±–∞–Ω–∫–∏—Ä–æ–º)**
    - –û–¥–æ–±—Ä–µ–Ω–æ: `approved` ‚Üí –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä
    - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: `rejected` ‚Üí —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞
    
    ### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (sandbox):
    –í sandbox –∑–∞—è–≤–∫–∏ –º–æ–≥—É—Ç –æ–¥–æ–±—Ä—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π:
    - –°—É–º–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
    - –ö–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤)
    - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–∫
    
    ### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:
    ```bash
    GET /product-application/{application_id}
    ```
    
    ### ‚ö†Ô∏è –í–∞–∂–Ω–æ:
    - –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    - –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
    - –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `POST /product-agreements` –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    
    ### –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è:
    ```bash
    POST /product-agreements
    {
      "product_id": "prod-vb-loan-002",
      "source_account_id": "acc-123",  # –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      "amount": 500000.0,
      "term_months": 36
    }
    ```
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç
    product_result = await db.execute(
        select(Product).where(Product.product_id == request.product_id)
    )
    product = product_result.scalar_one_or_none()
    
    if not product:
        raise HTTPException(404, f"Product {request.product_id} not found")
    
    if not product.is_active:
        raise HTTPException(400, "Product is not available")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    if product.min_amount and Decimal(str(request.requested_amount)) < product.min_amount:
        raise HTTPException(
            400, 
            f"Requested amount must be at least {product.min_amount}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    if product.max_amount and Decimal(str(request.requested_amount)) > product.max_amount:
        raise HTTPException(
            400, 
            f"Requested amount must not exceed {product.max_amount}"
        )
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
    application_id = f"app-{uuid.uuid4().hex[:12]}"
    
    application = ProductApplication(
        application_id=application_id,
        client_id=client.id,
        product_id=product.id,
        requested_amount=Decimal(str(request.requested_amount)),
        requested_term_months=request.requested_term_months or product.term_months,
        status="pending",
        application_data=json.dumps(request.application_data) if request.application_data else None,
        submitted_at=datetime.utcnow()
    )
    
    db.add(application)
    await db.commit()
    await db.refresh(application)
    
    return {
        "data": {
            "application_id": application.application_id,
            "client_id": client.person_id,
            "product_id": product.product_id,
            "product_name": product.name,
            "requested_amount": float(application.requested_amount),
            "requested_term_months": application.requested_term_months,
            "status": application.status,
            "submitted_at": application.submitted_at.isoformat() + "Z"
        },
        "links": {
            "self": f"/product-application/{application.application_id}"
        },
        "meta": {
            "message": "Application submitted successfully. It will be reviewed by bank."
        }
    }


@router.get("")
async def get_product_applications(
    status: Optional[str] = None,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    
    OpenBanking Russia Products API v1.3.1
    GET /product-application
    
    Query params:
    - status: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (pending, approved, rejected, cancelled)
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏
    query = select(ProductApplication, Product).join(
        Product, ProductApplication.product_id == Product.id
    ).where(
        ProductApplication.client_id == client.id
    )
    
    if status:
        query = query.where(ProductApplication.status == status)
    
    query = query.order_by(ProductApplication.submitted_at.desc())
    
    result = await db.execute(query)
    applications_data = result.all()
    
    applications_list = []
    for application, product in applications_data:
        app_data = {
            "application_id": application.application_id,
            "product_id": product.product_id,
            "product_name": product.name,
            "product_type": product.product_type,
            "requested_amount": float(application.requested_amount),
            "requested_term_months": application.requested_term_months,
            "status": application.status,
            "submitted_at": application.submitted_at.isoformat() + "Z"
        }
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if application.decision:
            app_data["decision"] = application.decision
            app_data["decision_reason"] = application.decision_reason
            app_data["approved_amount"] = float(application.approved_amount) if application.approved_amount else None
            app_data["approved_rate"] = float(application.approved_rate) if application.approved_rate else None
            app_data["decision_at"] = application.decision_at.isoformat() + "Z" if application.decision_at else None
        
        applications_list.append(app_data)
    
    return {
        "data": {
            "applications": applications_list
        },
        "meta": {
            "total": len(applications_list)
        }
    }


@router.get("/{application_id}")
async def get_product_application(
    application_id: str,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
    
    OpenBanking Russia Products API v1.3.1
    GET /product-applications/{productApplicationId}
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É
    app_result = await db.execute(
        select(ProductApplication, Product).join(
            Product, ProductApplication.product_id == Product.id
        ).where(
            ProductApplication.application_id == application_id,
            ProductApplication.client_id == client.id
        )
    )
    
    app_data = app_result.first()
    
    if not app_data:
        raise HTTPException(404, "Application not found")
    
    application, product = app_data
    
    response_data = {
        "application_id": application.application_id,
        "client_id": client.person_id,
        "product_id": product.product_id,
        "product_name": product.name,
        "product_type": product.product_type,
        "product_interest_rate": float(product.interest_rate) if product.interest_rate else None,
        "requested_amount": float(application.requested_amount),
        "requested_term_months": application.requested_term_months,
        "status": application.status,
        "submitted_at": application.submitted_at.isoformat() + "Z"
    }
    
    # –î–æ–±–∞–≤–∏—Ç—å application_data –µ—Å–ª–∏ –µ—Å—Ç—å
    if application.application_data:
        try:
            response_data["application_data"] = json.loads(application.application_data)
        except:
            pass
    
    # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if application.decision:
        response_data.update({
            "decision": application.decision,
            "decision_reason": application.decision_reason,
            "approved_amount": float(application.approved_amount) if application.approved_amount else None,
            "approved_rate": float(application.approved_rate) if application.approved_rate else None,
            "reviewed_at": application.reviewed_at.isoformat() + "Z" if application.reviewed_at else None,
            "decision_at": application.decision_at.isoformat() + "Z" if application.decision_at else None
        })
    
    return {
        "data": response_data,
        "links": {
            "self": f"/product-application/{application_id}"
        }
    }


@router.delete("/{application_id}")
async def delete_product_application(
    application_id: str,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    –û—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É
    
    OpenBanking Russia Products API v1.3.1
    DELETE /product-applications/{productApplicationId}
    
    –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending'
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É
    app_result = await db.execute(
        select(ProductApplication).where(
            ProductApplication.application_id == application_id,
            ProductApplication.client_id == client.id
        )
    )
    
    application = app_result.scalar_one_or_none()
    
    if not application:
        raise HTTPException(404, "Application not found")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    if application.status not in ["pending", "under_review"]:
        raise HTTPException(
            400, 
            f"Cannot cancel application with status '{application.status}'"
        )
    
    # –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
    application.status = "cancelled"
    application.updated_at = datetime.utcnow()
    
    await db.commit()
    
    return {
        "data": {
            "application_id": application.application_id,
            "status": "cancelled"
        },
        "meta": {
            "message": "Application cancelled successfully"
        }
    }

