"""
VRP Consents API - –°–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
OpenBanking Russia VRP API v1.3.1
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from pydantic import BaseModel
from typing import Optional
from decimal import Decimal
from datetime import datetime, timedelta
import uuid

from ..database import get_db
from ..models import VRPConsent, Account, Client
from ..services.auth_service import get_current_client

router = APIRouter(
    prefix="/vrp-consents",
    tags=["04 OpenBanking: VRP Consents"]
)


# === Pydantic Models ===

class VRPConsentRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VRP —Å–æ–≥–ª–∞—Å–∏—è"""
    account_id: str
    max_individual_amount: float
    max_amount_period: Optional[float] = None
    period_type: Optional[str] = "month"  # day, week, month, year
    max_payments_count: Optional[int] = None
    valid_days: Optional[int] = 365


# === Endpoints ===

@router.post("", status_code=201)
async def create_vrp_consent(
    request: VRPConsentRequest,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    ## üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ VRP (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã)
    
    **OpenBanking Russia VRP API v1.3.1 - Variable Recurring Payments**
    
    ### –ß—Ç–æ —Ç–∞–∫–æ–µ VRP?
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ —Å **–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏** ‚Äî —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –≥–¥–µ:
    - –ü–æ–ª—É—á–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
    - –°—É–º–º–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
    - –ù–æ –µ—Å—Ç—å —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    ### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    - üì± –ê–≤—Ç–æ–æ–ø–ª–∞—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏ (—Å—É–º–º–∞ –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü)
    - üè† –û–ø–ª–∞—Ç–∞ –ñ–ö–• (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—É–º–º–∞)
    - üöó –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã (—Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–ª–∞–Ω—ã)
    - üí≥ –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∫–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å < –ø–æ—Ä–æ–≥–∞)
    
    ### –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ```json
    {
      "account_id": "acc-123",
      "max_individual_amount": 5000.0,
      "max_amount_period": 20000.0,
      "period_type": "month",
      "max_payments_count": 100,
      "valid_days": 365
    }
    ```
    
    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–º–∏—Ç–æ–≤:
    - `max_individual_amount` ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂ (‚ÇΩ)
    - `max_amount_period` ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥ (‚ÇΩ)
    - `period_type` ‚Äî –ø–µ—Ä–∏–æ–¥: `day`, `week`, `month`, `year`
    - `max_payments_count` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
    - `valid_days` ‚Äî —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—Å–∏—è (–¥–Ω–µ–π)
    
    ### –ü—Ä–æ—Ü–µ—Å—Å:
    1. **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è** ‚Üí `POST /vrp-consents` (—ç—Ç–æ—Ç endpoint)
    2. **–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π** ‚Üí `POST /domestic-vrp-payments`
    3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏** ‚Üí `GET /domestic-vrp-payments`
    
    ### ‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
    - –ö–ª–∏–µ–Ω—Ç —è–≤–Ω–æ –¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å –ª–∏–º–∏—Ç–∞–º–∏
    - –ö–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞–º
    - –°–æ–≥–ª–∞—Å–∏–µ –º–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç: `DELETE /vrp-consents/{consent_id}`
    - –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω
    
    ### –°—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∏—è:
    - `active` ‚Äî –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ
    - `revoked` ‚Äî –æ—Ç–æ–∑–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º
    - `expired` ‚Äî –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ù–∞–π—Ç–∏ —Å—á–µ—Ç
    account_id_int = int(request.account_id.replace("acc-", ""))
    account_result = await db.execute(
        select(Account).where(
            Account.id == account_id_int,
            Account.client_id == client.id
        )
    )
    account = account_result.scalar_one_or_none()
    
    if not account:
        raise HTTPException(404, "Account not found or not owned by client")
    
    # –°–æ–∑–¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
    consent_id = f"vrp-{uuid.uuid4().hex[:12]}"
    valid_from = datetime.utcnow()
    valid_to = valid_from + timedelta(days=request.valid_days)
    
    consent = VRPConsent(
        consent_id=consent_id,
        client_id=client.id,
        account_id=account.id,
        status="Authorised",  # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ä–∞–∑—É –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
        max_individual_amount=Decimal(str(request.max_individual_amount)),
        max_amount_period=Decimal(str(request.max_amount_period)) if request.max_amount_period else None,
        period_type=request.period_type,
        max_payments_count=request.max_payments_count,
        valid_from=valid_from,
        valid_to=valid_to,
        authorised_at=datetime.utcnow()
    )
    
    db.add(consent)
    await db.commit()
    await db.refresh(consent)
    
    return {
        "data": {
            "consent_id": consent.consent_id,
            "account_id": f"acc-{account.id}",
            "account_number": account.account_number,
            "status": consent.status,
            "max_individual_amount": float(consent.max_individual_amount),
            "max_amount_period": float(consent.max_amount_period) if consent.max_amount_period else None,
            "period_type": consent.period_type,
            "max_payments_count": consent.max_payments_count,
            "valid_from": consent.valid_from.isoformat() + "Z",
            "valid_to": consent.valid_to.isoformat() + "Z",
            "created_at": consent.created_at.isoformat() + "Z"
        },
        "links": {
            "self": f"/vrp-consents/{consent.consent_id}"
        },
        "meta": {
            "message": "VRP Consent created and authorised successfully"
        }
    }


@router.get("/{consent_id}")
async def get_vrp_consent(
    consent_id: str,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ VRP —Å–æ–≥–ª–∞—Å–∏—è
    
    OpenBanking Russia VRP API v1.3.1
    GET /vrp-consents/{consentId}
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ù–∞–π—Ç–∏ —Å–æ–≥–ª–∞—Å–∏–µ
    consent_result = await db.execute(
        select(VRPConsent, Account).join(
            Account, VRPConsent.account_id == Account.id
        ).where(
            VRPConsent.consent_id == consent_id,
            VRPConsent.client_id == client.id
        )
    )
    
    consent_data = consent_result.first()
    
    if not consent_data:
        raise HTTPException(404, "VRP Consent not found")
    
    consent, account = consent_data
    
    return {
        "data": {
            "consent_id": consent.consent_id,
            "account_id": f"acc-{account.id}",
            "account_number": account.account_number,
            "status": consent.status,
            "max_individual_amount": float(consent.max_individual_amount),
            "max_amount_period": float(consent.max_amount_period) if consent.max_amount_period else None,
            "period_type": consent.period_type,
            "max_payments_count": consent.max_payments_count,
            "valid_from": consent.valid_from.isoformat() + "Z" if consent.valid_from else None,
            "valid_to": consent.valid_to.isoformat() + "Z" if consent.valid_to else None,
            "created_at": consent.created_at.isoformat() + "Z",
            "authorised_at": consent.authorised_at.isoformat() + "Z" if consent.authorised_at else None,
            "revoked_at": consent.revoked_at.isoformat() + "Z" if consent.revoked_at else None
        },
        "links": {
            "self": f"/vrp-consents/{consent_id}"
        }
    }


@router.delete("/{consent_id}")
async def delete_vrp_consent(
    consent_id: str,
    current_client: dict = Depends(get_current_client),
    db: AsyncSession = Depends(get_db)
):
    """
    –û—Ç–æ–∑–≤–∞—Ç—å VRP —Å–æ–≥–ª–∞—Å–∏–µ
    
    OpenBanking Russia VRP API v1.3.1
    DELETE /vrp-consents/{consentId}
    """
    if not current_client:
        raise HTTPException(401, "Unauthorized")
    
    # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Client).where(Client.person_id == current_client["client_id"])
    )
    client = result.scalar_one_or_none()
    
    if not client:
        raise HTTPException(404, "Client not found")
    
    # –ù–∞–π—Ç–∏ —Å–æ–≥–ª–∞—Å–∏–µ
    consent_result = await db.execute(
        select(VRPConsent).where(
            VRPConsent.consent_id == consent_id,
            VRPConsent.client_id == client.id
        )
    )
    
    consent = consent_result.scalar_one_or_none()
    
    if not consent:
        raise HTTPException(404, "VRP Consent not found")
    
    # –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
    consent.status = "Revoked"
    consent.revoked_at = datetime.utcnow()
    
    await db.commit()
    
    return {
        "data": {
            "consent_id": consent.consent_id,
            "status": "Revoked",
            "revoked_at": consent.revoked_at.isoformat() + "Z"
        },
        "meta": {
            "message": "VRP Consent revoked successfully"
        }
    }

